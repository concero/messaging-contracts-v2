import { encodeAbiParameters } from "viem";
import { CLFType, runCLFSimulation } from "../../utils/runCLFSimulation";
import { conceroMessageAbi } from "./utils/conceroMessageAbi";

// 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000008f90b8876dee6538000000000000000000000000000000000000000000000000304611b6affba76a000000000000000000000000dddddb8a8e41c194ac6542a0ad7ba663a72741e0000000000000000000000000dddddb8a8e41c194ac6542a0ad7ba663a72741e
// 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000008f90b8876dee6538000000000000000000000000000000000000000000000000304611b6affba76a000000000000000000000000dddddb8a8e41c194ac6542a0ad7ba663a72741e0000000000000000000000000dddddb8a8e41c194ac6542a0ad7ba663a72741e

describe("Concero Router", () => {
    it("Should deploy the contract and call sendMessage", async function () {
        const { abi: conceroRouterAbi } = await import(
            "../../artifacts/contracts/ConceroRouter/ConceroRouter.sol/ConceroRouter.json"
        );

        const message = {
            id: "0xdc21d6bd7c2aca2676da21de06870fef3c56a210e379990da1c044eb04bfc789",
            srcChainSelector: BigInt(process.env.CL_CCIP_CHAIN_SELECTOR_BASE_SEPOLIA),
            dstChainSelector: BigInt(process.env.CL_CCIP_CHAIN_SELECTOR_ARBITRUM_SEPOLIA),
            receiver: "0xdddddb8a8e41c194ac6542a0ad7ba663a72741e0",
            sender: "0xdddddb8a8e41c194ac6542a0ad7ba663a72741e0",
            tokenAmounts: [],
            relayers: [],
            data: "0x01",
            extraArgs: "0x",
        };

        const encodedMessage = encodeAbiParameters(conceroMessageAbi, [
            {
                srcChainSelector: message.srcChainSelector,
                dstChainSelector: message.dstChainSelector,
                receiver: message.receiver,
                sender: message.sender,
                tokenAmounts: message.tokenAmounts,
                relayers: message.relayers,
                data: message.data,
                extraArgs: message.extraArgs,
            },
        ]);

        const results = await runCLFSimulation(CLFType.requestReport, ["0x0", "0x0", message.id, encodedMessage], {
            print: false,
            rebuild: true,
        });

        console.log(results);
    });
});
